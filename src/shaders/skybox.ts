// Autogenerated file
import ShaderProgram from '../shaderprogram';

export default class Shader extends ShaderProgram {
  aPosition: number;
  aTexcoord: number;

  uView: WebGLUniformLocation;
  uProjection: WebGLUniformLocation;
  uFogColor: WebGLUniformLocation;
  uFogDensity: WebGLUniformLocation;
  uSky0: WebGLUniformLocation;
  uSky1: WebGLUniformLocation;
  uTime: WebGLUniformLocation;

  
  constructor(gl: WebGLRenderingContext) {
    super(gl, Shader.vsSource, Shader.fsSource);
  }
  

  static vsSource = `
attribute vec4 position;
attribute vec2 texcoord;

uniform mat4 view;
uniform mat4 projection;

varying highp vec2 f_texcoord;

void main() {
  mat4 fixed_view = mat4(mat3(view));

  gl_Position = projection * fixed_view * position;
  f_texcoord = texcoord;
}

`;
  static fsSource = `
uniform highp vec4  fogColor;
uniform highp float fogDensity;

highp vec4 mix_fog(highp vec4 base_color) {
  highp float dist = gl_FragCoord.z / gl_FragCoord.w;
  highp float fog  = 1.0 / exp(dist * fogDensity) * 2.0;
  fog = clamp(fog, 0.0, 1.0);
  return mix(fogColor, base_color, fog);
}


varying highp vec2 f_texcoord;

uniform sampler2D sky0;
uniform sampler2D sky1;
uniform mediump float time;

void main() {
  highp vec4 base    = texture2D(sky0, f_texcoord);
  highp vec2 offset  = vec2(
    time/200000.0,
    time/100000.0
  );
  highp vec4 overlay = texture2D(sky1, f_texcoord + offset);

  highp vec2 offset2  = vec2(
    time/400000.0,
    time/200000.0
  );
  highp vec4 overlay2 = texture2D(sky1, f_texcoord * 2.0 + offset2);

  
  highp vec4 final_color = vec4(mix(base.xyz, overlay2.xyz, overlay2.a), 1.0);
  final_color = vec4(mix(final_color.xyz, overlay.xyz, overlay.a), 1.0);
  gl_FragColor = mix_fog(final_color);

  //gl_FragColor = vec4(mix(base.xyz, overlay.xyz, overlay.a), 1.0);
}

`;
}
