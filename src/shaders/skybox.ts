// Autogenerated file
import ShaderProgram from '../shaderprogram';

export default class Shader extends ShaderProgram {
  aPosition: number;
  aTexcoord: number;

  uView: WebGLUniformLocation;
  uProjection: WebGLUniformLocation;
  uSky0: WebGLUniformLocation;
  uSky1: WebGLUniformLocation;
  uTime: WebGLUniformLocation;

  
  constructor(gl: WebGLRenderingContext) {
    super(gl, Shader.vsSource, Shader.fsSource);
  }
  

  static vsSource = `
attribute vec4 position;
attribute vec2 texcoord;

uniform mat4 view;
uniform mat4 projection;

varying highp vec2 f_texcoord;

void main() {
  mat4 fixed_view = mat4(mat3(view));

  gl_Position = projection * fixed_view * position;
  f_texcoord = texcoord;
}

`;
  static fsSource = `
varying highp vec2 f_texcoord;

uniform sampler2D sky0;
uniform sampler2D sky1;
uniform mediump float time;

void main() {
  highp vec4 base    = texture2D(sky0, f_texcoord);
  highp vec4 overlay = texture2D(sky1, f_texcoord + vec2(time / 100000.0, time / 100000.0));
  gl_FragColor = vec4(mix(base.xyz, overlay.xyz, overlay.a), 1.0);  
}

`;
}
