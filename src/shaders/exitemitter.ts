// Autogenerated file
import ShaderProgram from '../shaderprogram';

export default class Shader extends ShaderProgram {
  aBasePosition: number;
  aYOffset0: number;
  aYOffset1: number;
  aRotation: number;

  uModel: WebGLUniformLocation;
  uView: WebGLUniformLocation;
  uProjection: WebGLUniformLocation;
  uInterpolation: WebGLUniformLocation;
  uFogColor: WebGLUniformLocation;
  uFogDensity: WebGLUniformLocation;

  
  constructor(gl: WebGLRenderingContext) {
    super(gl, Shader.vsSource, Shader.fsSource);
  }
  

  static vsSource = `
attribute vec4 basePosition;
attribute highp float yOffset0;
attribute highp float yOffset1;
attribute highp float rotation;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform highp float interpolation;

void main() {
  vec4 interp_pos = basePosition;
  interp_pos.y += mix(yOffset0, yOffset1, interpolation);

  // translate the model matrix relative to this vertex instead of the emitter so that
  // rotations are about the particle center rather than the emitter center
  vec4 model_offset = vec4(
    cos(rotation) * 8.0,
    0,
    sin(rotation) * 8.0,
    0
  );

  mat4 model_t = model;
  model_t[3] += model_offset;

  // compute the model-view matrix using the offset model matrix and discard the rotation submatrix
  mat4 mv = view * model_t;
  mv[0] = vec4(1, 0, 0, 0);
  mv[1] = vec4(0, 1, 0, 0);
  mv[2] = vec4(0, 0, 1, 0);

  gl_Position = projection * mv * interp_pos;
}

`;
  static fsSource = `
uniform highp vec4  fogColor;
uniform highp float fogDensity;

highp vec4 mix_fog(highp vec4 base_color) {
  highp float dist = gl_FragCoord.z / gl_FragCoord.w;
  highp float fog  = 1.0 / exp(dist * fogDensity);
  fog = clamp(fog, 0.0, 1.0);
  return mix(fogColor, base_color, fog);
}


void main() {
  highp vec4 base_color = vec4(48.0 / 255.0, 104.0 / 255.0, 216.0 / 255.0, 1.0);
  gl_FragColor = mix_fog(base_color);
}

`;
}
