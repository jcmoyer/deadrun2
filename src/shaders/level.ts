// Autogenerated file
import ShaderProgram from '../shaderprogram';

export default class Shader extends ShaderProgram {
  aPosition: number;
  aTexcoord: number;
  aShade: number;

  uView: WebGLUniformLocation;
  uProjection: WebGLUniformLocation;
  uFogColor: WebGLUniformLocation;
  uFogDensity: WebGLUniformLocation;
  uWallTexture: WebGLUniformLocation;

  
  constructor(gl: WebGLRenderingContext) {
    super(gl, Shader.vsSource, Shader.fsSource);
  }
  

  static vsSource = `
attribute vec4  position;
attribute vec2  texcoord;

attribute float shade;

uniform mat4 view;
uniform mat4 projection;

varying highp float f_shade;
varying vec2        f_texcoord;

void main() {
  gl_Position = projection * view * position;
  f_shade     = shade;
  f_texcoord  = texcoord;
}

`;
  static fsSource = `
uniform highp vec4  fogColor;
uniform highp float fogDensity;

highp vec4 mix_fog(highp vec4 base_color) {
  highp float dist = gl_FragCoord.z / gl_FragCoord.w;
  highp float fog  = 1.0 / exp(dist * fogDensity);
  fog = clamp(fog, 0.0, 1.0);
  return mix(fogColor, base_color, fog);
}


varying highp float f_shade;
varying highp vec2  f_texcoord;

uniform sampler2D   wallTexture;

void main() {
  highp vec4 base_color = texture2D(wallTexture, f_texcoord);
  gl_FragColor = mix_fog(base_color);
}

`;
}
